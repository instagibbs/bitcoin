#!/usr/bin/env python3
# Copyright (c) 2014-2021 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
"""Test the wallet."""
from decimal import Decimal
from itertools import product

from test_framework.blocktools import COINBASE_MATURITY
from test_framework.test_framework import BitcoinTestFramework
from test_framework.util import (
    assert_array_result,
    assert_equal,
    assert_fee_amount,
    assert_raises_rpc_error,
    find_vout_for_address,
)
from test_framework.wallet_util import test_address

from test_framework.messages import (
    COutPoint,
    CTransaction,
    CTxIn,
    CTxOut,
    MAX_MONEY,
    SEQUENCE_FINAL,
    tx_from_hex,
    uint256_from_str,
)

NOT_A_NUMBER_OR_STRING = "Amount is not a number or string"
OUT_OF_RANGE = "Amount out of range"


class WalletTest(BitcoinTestFramework):
    def set_test_params(self):
        self.num_nodes = 4
        self.extra_args = [[
            "-dustrelayfee=0", "-walletrejectlongchains=0"
        ]] * self.num_nodes
        self.setup_clean_chain = True
        self.supports_cli = False

    def skip_test_if_missing_module(self):
        self.skip_if_no_wallet()

    def setup_network(self):
        self.setup_nodes()
        # Only need nodes 0-2 running at start of test
        self.stop_node(3)
        self.connect_nodes(0, 1)
        self.connect_nodes(1, 2)
        self.connect_nodes(0, 2)
        self.sync_all(self.nodes[0:3])

    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):
        """Return curr_balance after asserting the fee was in range"""
        fee = balance_with_fee - curr_balance
        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)
        return curr_balance

    def get_vsize(self, txn):
        return self.nodes[0].decoderawtransaction(txn)['vsize']

    def run_test(self):

        # Check that there's no UTXO on none of the nodes
        assert_equal(len(self.nodes[0].listunspent()), 0)
        assert_equal(len(self.nodes[1].listunspent()), 0)
        assert_equal(len(self.nodes[2].listunspent()), 0)

        self.log.info("Mining blocks...")

        self.generate(self.nodes[0], 1, sync_fun=self.no_op)

        walletinfo = self.nodes[0].getwalletinfo()
        assert_equal(walletinfo['immature_balance'], 50)
        assert_equal(walletinfo['balance'], 0)

        self.sync_all(self.nodes[0:3])
        self.generate(self.nodes[1], COINBASE_MATURITY + 1, sync_fun=lambda: self.sync_all(self.nodes[0:3]))

        assert_equal(self.nodes[0].getbalance(), 50)
        assert_equal(self.nodes[1].getbalance(), 50)
        assert_equal(self.nodes[2].getbalance(), 0)

        # Generated by CLN, we can just fund the spent output thanks to APO signature
        psbt = "cHNidP8BAJMCAAAAAb72fk4vud3us0YZc81MYquzUFCxrddymVuCC1hKSISJAAAAAAAqAAAAAwAAAAAAAAAAAVEQJwAAAAAAACJRIPlDx/GnSoE9K1im2jozNaDLrknuKie+hFG0pFYay/RoHOgAAAAAAAAiUSBxpTJf6l2xHz/4h6pSz+VBQ/hcjh9csWPZhfE/S6ruBAAAAAAAAQErLA8BAAAAAAAiUSAPIyxiYhkHppipc0tA8c0w/Vq3V+funzDoliDmcuoB/QEIqQJlQZ7iHm2jgoLXaf0yJGUeRBXG6Vy1sDQ2ybMP3bdceny9w7Z0+PGZv19xJn/cEByln3YS6INUC78yrzEHLpFbs1HBIQF5vmZ++dy7rFWgYpXOhwsHApv82y3OKNlZ8oFbFvgXmKxBwUQrVY0kML4BD8OqQFp4uB08JUFF/JbcKPk0fkdIzHCkbrCcs8B6dJk6DClM+guH1aqdl5+MSw4Cvi+lYbQW0zMAAAAA"
        decoded_psbt = self.nodes[0].decodepsbt(psbt)
        eltoo_update_addr = decoded_psbt["inputs"][0]["witness_utxo"]["scriptPubKey"]["address"]
        final_tx = self.nodes[0].finalizepsbt(psbt)
        tx = final_tx['hex']
        assert final_tx['complete']

        funding_txid = self.nodes[0].sendtoaddress(eltoo_update_addr, Decimal('0.00069420')) # this value allows fee to be 0
        raw_funding_tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(funding_txid)["hex"])
        c_settle_tx = tx_from_hex(tx)

        # Rebind the tx to current prevout
        c_settle_tx.vin[0].prevout.hash = uint256_from_str(bytes.fromhex(funding_txid)[::-1])
        c_settle_tx.vin[0].prevout.n = 0 if raw_funding_tx["vout"][0]["value"] == Decimal('0.00069420') else 1
        rebind_settle = c_settle_tx.serialize().hex()

        res = self.nodes[0].testmempoolaccept([rebind_settle])
        assert_equal(res[0]["reject-reason"], 'non-BIP68-final')

        self.generate(self.nodes[0], 43, sync_fun=lambda: self.sync_all(self.nodes[0:3]))
        res = self.nodes[0].testmempoolaccept([rebind_settle])
        assert_equal(res[0]["reject-reason"], 'min relay fee not met')

        # Test if anchoring gets us into mempool via package submission
        funding_coin = self.nodes[0].listunspent()[0]
        anchor_spend = self.nodes[0].createpsbt(inputs=[{"txid": res[0]['txid'], "vout": 0}, {"txid":funding_coin["txid"], "vout": funding_coin["vout"]}], outputs=[{self.nodes[0].getnewaddress(): funding_coin["amount"]-Decimal('0.001')}])

        # bip174.org inject 00000000000000000151 onto witness utxo and deadbeef final scriptsig(we surgically remove later), respectively
        print(anchor_spend)
        from pdb import set_trace
        set_trace()

        # Double process due to bug in precomputed data struct
        anchor_spend = self.nodes[0].walletprocesspsbt(anchor_spend)
        anchor_spend = self.nodes[0].walletprocesspsbt(anchor_spend['psbt'])
        anchor_spend_hex = self.nodes[0].finalizepsbt(anchor_spend['psbt'])['hex']
        anchor_spend_hex = anchor_spend_hex.replace("04deadbeef", "00")

        package_result = self.nodes[0].submitpackage([rebind_settle, anchor_spend_hex])
        print(package_result)

        '''
        funding tx -> 0200000001797a827a25bdf354b9f9440d7de2ded6596cc2c8b8dc2eaf936a476049f898c4000000006a4730440220395454114337c72e191df2d9c641f70046895112ca414b78b72288a6b20435e10220316ff13809e1d6c027387ef8326faba82e1d1d9888ec0b46ec2f94fd91a675d901210227d85ba011276cf25b51df6a188b75e604b38770a462b2d0e9fb2fc839ef5d3ffeffffff02d8cf042a0100000022512098b1f620dbbc3907cadf0b87b77733b009eb4ca73948892938ddb84093d39b6c2c0f0100000000002251200f232c62621907a698a9734b40f1cd30fd5ab757e7ee9f30e89620e672ea01fd66000000
        settlement tx -> 02000000000101d8dd1cf04612f34a6019a0847935790c4a00907a533543c58a31b0917c9c263101000000002a00000003000000000000000001511027000000000000225120f943c7f1a74a813d2b58a6da3a3335a0cbae49ee2a27be8451b4a4561acbf4681ce800000000000022512071a5325fea5db11f3ff887aa52cfe54143f85c8e1f5cb163d985f13f4baaee040265419ee21e6da38282d769fd3224651e4415c6e95cb5b03436c9b30fddb75c7a7cbdc3b674f8f199bf5f71267fdc101ca59f7612e883540bbf32af31072e915bb351c1210179be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac41c1442b558d2430be010fc3aa405a78b81d3c254145fc96dc28f9347e4748cc70a46eb09cb3c07a74993a0c294cfa0b87d5aa9d979f8c4b0e02be2fa561b416d33300000000
        anchor spend tx -> 020000000001029812c8de6fe53a2404205a36986060a129660c35c8b0c2c971287850839e34600000000000ffffffffd8dd1cf04612f34a6019a0847935790c4a00907a533543c58a31b0917c9c26310000000000ffffffff013849032a0100000016001424344873f0dc89afeda669c56262f43326a4ccae00014088261ba4d1f1efe87645b4e85b272cd974f8ee27337a309911cec86517c5f4221ca161e22f25db3268c5d4b4065d4957c9528e1e2bb9d41591f6438721d6eadc00000000
        '''

if __name__ == '__main__':
    WalletTest().main()
